<?php

namespace Nuada\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FavoriteRepository
 *
 * This class was generated by the Doctrine ORM.
 */
class FavoriteRepository extends EntityRepository
{
    /**
     * Retrieve All
     *
     * @param integer $id           - Listing Id
     * @param integer $limit        - Limit
     * @param integer $offset       - Offset
     * @param string  $name         - Name
     * @param string  $city         - City
     * @param string  $country      - Country
     * @param string  $expertise    - Expertise
     * @param string  $email        - Email
     * @param boolean $withDeleted  - With deleted Experts
     *
     * @return array
     */
    public function retrieveAll(
        $id=null,
        $limit=null,
        $offset=null,
        $userId=null,
        $listingId=null,
        $withDeleted=false)
    {
        $qb = $this->createQueryBuilder('e');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($userId)) {
            $qb = $qb->andWhere('e.userId = :userId')
                ->setParameter('userId', $userId);
        }

        if (!is_null($listingId)) {
            $qb = $qb->andWhere('e.listingId = :listingId')
                ->setParameter('listingId', $listingId);
        }

        if ($offset) {
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        if ($limit && !$offset) {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Retrieve All
     *
     * @param integer $id           - Listing Id
     * @param string  $name         - Name
     * @param string  $city         - City
     * @param string  $country      - Country
     * @param string  $expertise    - Expertise
     * @param string  $email        - Email
     * @param boolean $withDeleted  - With deleted Experts
     *
     * @return array
     */
    public function fetchCount(
        $id=null,
        $userId=null,
        $listingId=null,
        $withDeleted=false)
    {
        $qb = $this->createQueryBuilder('e')
            ->select('count(e)');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($userId)) {
            $qb = $qb->andWhere('e.userId = :userId')
                ->setParameter('userId', $userId);
        }

        if (!is_null($listingId)) {
            $qb = $qb->andWhere('e.listingId = :listingId')
                ->setParameter('listingId', $listingId);
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
}
