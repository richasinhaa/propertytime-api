<?php

namespace Nuada\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AgencyRepository
 *
 * This class was generated by the Doctrine ORM.
 */
class PhotoRepository extends EntityRepository
{
    /**
     * Retrieve All
     *
     * @param integer $id          - id
     * @param integer $listingId   - Listing Id
     * @param integer $agencyId    - Agency Id
     * @param string  $sortOn      - Sort On
     * @param boolean $reverse     - Reverse
     * @param integer $limit       - Limit
     * @param integer $offset      - Offset
     * @param boolean $withDeleted - With deleted listing
     *
     * @return array
     */
    public function retrieveAll(
        $id=null,
        $listingId=null,
        $agencyId=null,
        $neighbourhoodId=null,
        $sortOn=null,
        $reverse=false,
        $limit=null,
        $offset=null,
        $withDeleted=false)
    {
        $qb = $this->createQueryBuilder('e');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($listingId)) {
            $qb = $qb->andWhere('e.listingId = :listingId')
                ->setParameter('listingId', $listingId);
        }

        if (!is_null($agencyId)) {
            $qb = $qb->andWhere('e.agencyId = :agencyId')
                ->setParameter('agencyId', $agencyId);
        }

        if (!is_null($neighbourhoodId)) {
            $qb = $qb->andWhere('e.neighbourhoodId = :neighbourhoodId')
                ->setParameter('neighbourhoodId', $neighbourhoodId);
        }

        if ($sortOn) {
            $order = $this->getSortCriteria($sortOn, $reverse);

            $qb->orderBy('e.'.$order['column'], $order['direction']);
        }

        if ($offset) {
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        if ($limit && !$offset) {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @param string  $sortOn  - Sort field
     * @param boolean $reverse - Sort in reverse
     *
     * @return array
     */
    public function getSortCriteria($sortOn, $reverse)
    {
        if (empty($sortOn)) {
            return array();
        }
        $sort = array();
        $sort['direction'] = $reverse?'DESC':'ASC';

        if ($sortOn == 'modified_on') {
            $sort['column'] = 'modifiedOn';
        }

        return $sort;
    }

    /**
     * Retrieve All
     *
     * @param integer $id          - Listing Id
     * @param string  $listingId    - Listing Id
     * @param integer $agencyId    -  Agency Id
     * @param boolean $withDeleted - With deleted listing
     *
     * @return array
     */
    public function fetchCount(
        $id=null,
        $listingId=null,
        $agencyId=null,
        $withDeleted=false)
    {
        $qb = $this->createQueryBuilder('e')
            ->select('count(e)');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }


        if (!is_null($listingId)) {
            $qb = $qb->andWhere('e.listingId = :listingId')
                ->setParameter('listingId', $listingId);
        }

        if (!is_null($agencyId)) {
            $qb = $qb->andWhere('e.agencyId = :agencyId')
                ->setParameter('agencyId', $agencyId);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }
        
        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
}
