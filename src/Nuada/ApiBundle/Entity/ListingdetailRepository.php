<?php

namespace Nuada\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ListingdetailRepository
 *
 * This class was generated by the Doctrine ORM. 
 */
class ListingdetailRepository extends EntityRepository
{
	/**
     * Retrieve All
     *
     * @param integer $id          - Listing Id
     * @param integer $limit       - Limit
     * @param integer $offset      - Offset
     * @param boolean $withDeleted - With deleted listing
     * @param integer $listingId   - listing id
     * @param integer $imageId     - Image id
     * @param string  $sortOn      - Sort on
     * @param boolean $reverse     - Reverse
     *
     * @return array
     */
    public function retrieveAll($id = null,
            $limit = null,
            $offset = null,
            $withDeleted = null,
            $listingId = null,
            $imageId = null,
            $sortOn = null,
            $reverse = false)
    {
    	if (!is_null($id)) {
        	return $this->find($id);
        }

        $qb = $this->createQueryBuilder('e');


        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }
        
        if (!is_null($listingId)) {
            $qb = $qb->andWhere('e.listingId = :listingId')
                     ->setParameter('listingId', $listingId);
        }

        if (!is_null($imageId)) {
            $qb = $qb->andWhere('e.imageId = :imageId')
                     ->setParameter('imageId', $imageId);
        }
        if ($sortOn) {
            $order = $this->getSortCriteria($sortOn, $reverse);
            
            $qb->orderBy('e.'.$order['column'], $order['direction']);
        }
        
        if ($offset) {
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        if ($limit && !$offset) {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

     /**
     * @param string  $sortOn  - Sort field
     * @param boolean $reverse - Sort in reverse
     *
     * @return array
     */
    public function getSortCriteria($sortOn, $reverse)
    {
        if (empty($sortOn)) {
            return array();
        }
        $sort = array();
        $sort['direction'] = $reverse?'DESC':'ASC';

        if ($sortOn == 'modified_on') {
            $sort['column'] = 'modifiedOn';
        }

        return $sort;
    }
}
