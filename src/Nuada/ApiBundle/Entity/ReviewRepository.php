<?php

namespace Nuada\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReviewRepository extends EntityRepository
{
    /**
     * Retrieve All
     *
     * @param integer    $id           - Id
     * @param integer    $limit        - Limit
     * @param integer    $offset       - Offset
     * @param integer    $agencyId     - Agency Id
     * @param integer    $agentId      - Agent Id
     * @param string     $agentName    - Agent Name
     * @param integer    $rating       - Rating
     * @param boolean    $withDeleted  - With Deleted
     * @param \DateTime  $from         - From date
     * @param \DateTime  $to           - Till date
     *
     * @return array
     */
    public function retrieveAll(
        $id=null,
        $limit=null,
        $offset=null,
        $agencyId=null,
        $agentId=null,
        $agentName=null,
        $rating=null,
        $withDeleted=false,
        $from=null,
        $to=null)
    {
        $qb = $this->createQueryBuilder('e');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($agencyId)) {
            $qb = $qb->andWhere('e.agencyId = :agencyId')
                ->setParameter('agencyId', $agencyId);
        }

        if (!is_null($agentId)) {
            $qb = $qb->andWhere('e.agentId = :agentId')
                ->setParameter('agentId', $agentId);
        }

        if (!is_null($agentName)) {
            $qb = $qb->andWhere('e.agentName = :agentName')
                ->setParameter('agentName', $agentName);
        }

        if (!is_null($rating)) {
            $qb = $qb->andWhere('e.rating = :rating')
                ->setParameter('rating', $rating);
        }

        if (!is_null($from)) {
            $qb = $qb->andWhere('e.createdAt >= :from')
                ->setParameter('from', $from);
        }

        if (!is_null($to)) {
            $qb = $qb->andWhere('e.createdAt <= :to')
                ->setParameter('to', $to);
        }

        if ($offset) {
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        if ($limit && !$offset) {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Retrieve All
     *
     * @param integer    $id           - Id
     * @param integer    $agencyId     - Agency Id
     * @param integer    $agentId      - Agent Id
     * @param string     $agentName    - Agent Name
     * @param integer    $rating       - Rating
     * @param boolean    $withDeleted  - With Deleted
     * @param \DateTime  $from         - From date
     * @param \DateTime  $to           - Till date
     *
     * @return array
     */
    public function fetchCount(
        $id=null,
        $agencyId=null,
        $agentId=null,
        $agentName=null,
        $rating=null,
        $withDeleted=null,
        $from=null,
        $to=null)
    {
        $qb = $this->createQueryBuilder('e')
            ->select('count(e)');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($agencyId)) {
            $qb = $qb->andWhere('e.agencyId = :agencyId')
                ->setParameter('agencyId', $agencyId);
        }

        if (!is_null($agentId)) {
            $qb = $qb->andWhere('e.agentId = :agentId')
                ->setParameter('agentId', $agentId);
        }

        if (!is_null($agentName)) {
            $qb = $qb->andWhere('e.agentName = :agentName')
                ->setParameter('agentName', $agentName);
        }

        if (!is_null($rating)) {
            $qb = $qb->andWhere('e.rating = :rating')
                ->setParameter('rating', $rating);
        }

        if (!is_null($from)) {
            $qb = $qb->andWhere('e.createdAt >= :from')
                ->setParameter('from', $from);
        }

        if (!is_null($to)) {
            $qb = $qb->andWhere('e.createdAt <= :to')
                ->setParameter('to', $to);
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
}
