<?php

namespace Nuada\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AgencyRepository
 *
 * This class was generated by the Doctrine ORM. 
 */
class AgencyRepository extends EntityRepository
{
	/**
     * Retrieve All
     *
     * @param integer $id          - Listing Id
     * @param integer $limit       - Limit
     * @param integer $offset      - Offset
     * @param boolean $withDeleted - With deleted listing
     * @param string $name         - Name
     * @param integer $userId      - User Id
     * @param string $userName     - User name
     * @param string sortOn        - Sort On
     * @param boolean $reverse     - Reverse
     *
     * @return array
     */
    public function retrieveAll(
            $id = null,
            $limit = null,
            $offset = null,
            $withDeleted = false,
            $name = null,
            $userId = null,
            $userName = null,
            $sortOn = null,
            $reverse = false)
    {
        $qb = $this->createQueryBuilder('e');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }
        
        if (!is_null($name)) {
            $qb = $qb->andWhere('e.name = :name')
                     ->setParameter('name', $name);
        }

        if (!is_null($userId)) {
            $qb = $qb->andWhere('e.userId = :userId')
                     ->setParameter('userId', $userId);
        }

        if (!is_null($userName)) {
            $qb = $qb->andWhere('e.userName = :userName')
                     ->setParameter('userName', $userName);
        }

        if ($sortOn) {
            $order = $this->getSortCriteria($sortOn, $reverse);
            
            $qb->orderBy('e.'.$order['column'], $order['direction']);
        }
        
        if ($offset) {
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        if ($limit && !$offset) {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

     /**
     * @param string  $sortOn  - Sort field
     * @param boolean $reverse - Sort in reverse
     *
     * @return array
     */
    public function getSortCriteria($sortOn, $reverse)
    {
        if (empty($sortOn)) {
            return array();
        }
        $sort = array();
        $sort['direction'] = $reverse?'DESC':'ASC';

        if ($sortOn == 'modified_on') {
            $sort['column'] = 'modifiedOn';
        }

        return $sort;
    }

    /**
     * Retrieve All
     *
     * @param integer $id          - Listing Id
     * @param boolean $withDeleted - With deleted listing
     * @param string $name         - Name
     * @param integer $userId      - User Id
     * @param string $userName     - User name
     *
     * @return array
     */
    public function fetchCount(
        $id = null,
        $withDeleted = false,
        $name = null,
        $userId = null,
        $userName = null)
    {
        $qb = $this->createQueryBuilder('e')
                    ->select('count(e)');

        if (!is_null($id)) {
            $qb = $qb->andWhere('e.id = :id')
                ->setParameter('id', $id);
        }

        if (!$withDeleted) {
            $qb = $qb->andWhere('e.deleted = false');
        }

        if (!is_null($name)) {
            $qb = $qb->andWhere('e.name = :name')
                ->setParameter('name', $name);
        }

        if (!is_null($userId)) {
            $qb = $qb->andWhere('e.userId = :userId')
                ->setParameter('userId', $userId);
        }

        if (!is_null($userName)) {
            $qb = $qb->andWhere('e.userName = :userName')
                ->setParameter('userName', $userName);
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }
}
